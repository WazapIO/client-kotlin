/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.MainAPIResponse
import org.openapitools.client.models.StructsUserInfoPayload

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MiscellaneousApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Get profile pic.
     * Returns the profile pic of the given user.
     * @param instanceKey Instance key
     * @param jid JID
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyMiscProfilePicGet(instanceKey: kotlin.String, jid: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyMiscProfilePicGetWithHttpInfo(instanceKey = instanceKey, jid = jid)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get profile pic.
     * Returns the profile pic of the given user.
     * @param instanceKey Instance key
     * @param jid JID
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyMiscProfilePicGetWithHttpInfo(instanceKey: kotlin.String, jid: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyMiscProfilePicGetRequestConfig(instanceKey = instanceKey, jid = jid)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyMiscProfilePicGet
     *
     * @param instanceKey Instance key
     * @param jid JID
     * @return RequestConfig
     */
    fun instancesInstanceKeyMiscProfilePicGetRequestConfig(instanceKey: kotlin.String, jid: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("jid", listOf(jid.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/misc/profile-pic".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Fetches the users info.
     * Gets the user info for the given user ids. This does not checks if user is registered or not
     * @param instanceKey Instance key
     * @param `data` Data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyMiscUserInfoPost(instanceKey: kotlin.String, `data`: StructsUserInfoPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyMiscUserInfoPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Fetches the users info.
     * Gets the user info for the given user ids. This does not checks if user is registered or not
     * @param instanceKey Instance key
     * @param `data` Data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyMiscUserInfoPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsUserInfoPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyMiscUserInfoPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsUserInfoPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyMiscUserInfoPost
     *
     * @param instanceKey Instance key
     * @param `data` Data
     * @return RequestConfig
     */
    fun instancesInstanceKeyMiscUserInfoPostRequestConfig(instanceKey: kotlin.String, `data`: StructsUserInfoPayload) : RequestConfig<StructsUserInfoPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/misc/user-info".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
