/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.openapitools.client.models.MainAPIResponse
import org.openapitools.client.models.StructsWebhookPayload

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.PartConfig
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class InstanceApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Creates a new instance key.
     * This endpoint is used to create a new WhatsApp Web instance.
     * @param instanceKey Insert instance key if you want to provide custom key (optional)
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesCreateGet(instanceKey: kotlin.String? = null) : MainAPIResponse {
        val localVarResponse = instancesCreateGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Creates a new instance key.
     * This endpoint is used to create a new WhatsApp Web instance.
     * @param instanceKey Insert instance key if you want to provide custom key (optional)
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesCreateGetWithHttpInfo(instanceKey: kotlin.String?) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesCreateGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesCreateGet
     *
     * @param instanceKey Insert instance key if you want to provide custom key (optional)
     * @return RequestConfig
     */
    fun instancesCreateGetRequestConfig(instanceKey: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (instanceKey != null) {
                    put("instance_key", listOf(instanceKey.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get contacts.
     * Fetches the list of contacts in the instance.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyContactsGet(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyContactsGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get contacts.
     * Fetches the list of contacts in the instance.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyContactsGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyContactsGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyContactsGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyContactsGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/contacts".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Delete Instance.
     * Deletes the instance with the provided key.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyDeleteDelete(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyDeleteDeleteWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete Instance.
     * Deletes the instance with the provided key.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyDeleteDeleteWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyDeleteDeleteRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyDeleteDelete
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyDeleteDeleteRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/delete".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get Instance.
     * Returns the instance data of single instance with connection status.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGet(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Instance.
     * Returns the instance data of single instance with connection status.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Logout Instance.
     * Logouts of the instance with the provided key.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyLogoutDelete(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyLogoutDeleteWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Logout Instance.
     * Logouts of the instance with the provided key.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyLogoutDeleteWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyLogoutDeleteRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyLogoutDelete
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyLogoutDeleteRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/logout".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get QrCode.
     * Returns the qrcode in the base64 format.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyQrcodeGet(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyQrcodeGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get QrCode.
     * Returns the qrcode in the base64 format.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyQrcodeGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyQrcodeGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyQrcodeGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyQrcodeGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/qrcode".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Change Webhook url.
     * Changes the webhook url of an instance.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyWebhookPut(instanceKey: kotlin.String, `data`: StructsWebhookPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyWebhookPutWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Change Webhook url.
     * Changes the webhook url of an instance.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyWebhookPutWithHttpInfo(instanceKey: kotlin.String, `data`: StructsWebhookPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyWebhookPutRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsWebhookPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyWebhookPut
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeyWebhookPutRequestConfig(instanceKey: kotlin.String, `data`: StructsWebhookPayload) : RequestConfig<StructsWebhookPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/webhook".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get all instances.
     * Fetches the list of all Instances with login status.
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesListGet() : MainAPIResponse {
        val localVarResponse = instancesListGetWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all instances.
     * Fetches the list of all Instances with login status.
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesListGetWithHttpInfo() : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesListGetRequestConfig()

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesListGet
     *
     * @return RequestConfig
     */
    fun instancesListGetRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
