/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package whatsapi

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import models.APIResponse
import models.GroupCreatePayload
import models.GroupUpdateDescriptionPayload
import models.GroupUpdateNamePayload
import models.GroupUpdateParticipantsPayload
import models.SetGroupPictureRequest

import com.squareup.moshi.Json

import WhatsAPI.infrastructure.ApiClient
import WhatsAPI.infrastructure.ApiResponse
import WhatsAPI.infrastructure.ClientException
import WhatsAPI.infrastructure.ClientError
import WhatsAPI.infrastructure.ServerException
import WhatsAPI.infrastructure.ServerError
import WhatsAPI.infrastructure.MultiValueMap
import WhatsAPI.infrastructure.PartConfig
import WhatsAPI.infrastructure.RequestConfig
import WhatsAPI.infrastructure.RequestMethod
import WhatsAPI.infrastructure.ResponseType
import WhatsAPI.infrastructure.Success
import WhatsAPI.infrastructure.toMultiValue

class GroupManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun addParticipant(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = addParticipantWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun addParticipantWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = addParticipantRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation addParticipant
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun addParticipantRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/groups/{group_id}/participants/add".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createGroup(instanceKey: kotlin.String, `data`: GroupCreatePayload) : APIResponse {
        val localVarResponse = createGroupWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun createGroupWithHttpInfo(instanceKey: kotlin.String, `data`: GroupCreatePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = createGroupRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<GroupCreatePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createGroup
     *
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return RequestConfig
     */
    fun createGroupRequestConfig(instanceKey: kotlin.String, `data`: GroupCreatePayload) : RequestConfig<GroupCreatePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/groups/create".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun demoteParticipant(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = demoteParticipantWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun demoteParticipantWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = demoteParticipantRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation demoteParticipant
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun demoteParticipantRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/participants/demote".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get admin groups.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAdminGroups(instanceKey: kotlin.String) : APIResponse {
        val localVarResponse = getAdminGroupsWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get admin groups.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAdminGroupsWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = getAdminGroupsRequestConfig(instanceKey = instanceKey)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAdminGroups
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun getAdminGroupsRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/admin".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter includeParticipants
     */
     enum class IncludeParticipants_getAllGroups(val value: kotlin.String) {
         @Json(name = "false") `false`("false"),
         @Json(name = "true") `true`("true")
     }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getAllGroups(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_getAllGroups? = IncludeParticipants_getAllGroups.&#x60;true&#x60;) : APIResponse {
        val localVarResponse = getAllGroupsWithHttpInfo(instanceKey = instanceKey, includeParticipants = includeParticipants)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getAllGroupsWithHttpInfo(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_getAllGroups?) : ApiResponse<APIResponse?> {
        val localVariableConfig = getAllGroupsRequestConfig(instanceKey = instanceKey, includeParticipants = includeParticipants)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getAllGroups
     *
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return RequestConfig
     */
    fun getAllGroupsRequestConfig(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_getAllGroups?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeParticipants != null) {
                    put("include_participants", listOf(includeParticipants.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroup(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = getGroupWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = getGroupRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroup
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun getGroupRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/{group_id}".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupFromInviteLink(instanceKey: kotlin.String, inviteLink: kotlin.String) : APIResponse {
        val localVarResponse = getGroupFromInviteLinkWithHttpInfo(instanceKey = instanceKey, inviteLink = inviteLink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupFromInviteLinkWithHttpInfo(instanceKey: kotlin.String, inviteLink: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = getGroupFromInviteLinkRequestConfig(instanceKey = instanceKey, inviteLink = inviteLink)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupFromInviteLink
     *
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return RequestConfig
     */
    fun getGroupFromInviteLinkRequestConfig(instanceKey: kotlin.String, inviteLink: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("invite_link", listOf(inviteLink.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/invite-info".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getGroupInviteCode(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = getGroupInviteCodeWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getGroupInviteCodeWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = getGroupInviteCodeRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getGroupInviteCode
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun getGroupInviteCodeRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/{group_id}/invite-code".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun leaveGroup(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = leaveGroupWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun leaveGroupWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = leaveGroupRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation leaveGroup
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun leaveGroupRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/groups/{group_id}/".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun promoteParticipant(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = promoteParticipantWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun promoteParticipantWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = promoteParticipantRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation promoteParticipant
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun promoteParticipantRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/participants/promote".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun removeParticipant(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = removeParticipantWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun removeParticipantWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = removeParticipantRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation removeParticipant
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun removeParticipantRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/groups/{group_id}/participants/remove".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter announce
     */
     enum class Announce_setGroupAnnounce(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false")
     }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setGroupAnnounce(instanceKey: kotlin.String, announce: Announce_setGroupAnnounce = Announce_setGroupAnnounce.false, groupId: kotlin.String) : APIResponse {
        val localVarResponse = setGroupAnnounceWithHttpInfo(instanceKey = instanceKey, announce = announce, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setGroupAnnounceWithHttpInfo(instanceKey: kotlin.String, announce: Announce_setGroupAnnounce, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = setGroupAnnounceRequestConfig(instanceKey = instanceKey, announce = announce, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setGroupAnnounce
     *
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun setGroupAnnounceRequestConfig(instanceKey: kotlin.String, announce: Announce_setGroupAnnounce, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/announce".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"announce"+"}", encodeURIComponent(announce.value.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setGroupDescription(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : APIResponse {
        val localVarResponse = setGroupDescriptionWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setGroupDescriptionWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = setGroupDescriptionRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateDescriptionPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setGroupDescription
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return RequestConfig
     */
    fun setGroupDescriptionRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : RequestConfig<GroupUpdateDescriptionPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/description".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter locked
     */
     enum class Locked_setGroupLocked(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false")
     }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setGroupLocked(instanceKey: kotlin.String, locked: Locked_setGroupLocked = Locked_setGroupLocked.false, groupId: kotlin.String) : APIResponse {
        val localVarResponse = setGroupLockedWithHttpInfo(instanceKey = instanceKey, locked = locked, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setGroupLockedWithHttpInfo(instanceKey: kotlin.String, locked: Locked_setGroupLocked, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = setGroupLockedRequestConfig(instanceKey = instanceKey, locked = locked, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setGroupLocked
     *
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun setGroupLockedRequestConfig(instanceKey: kotlin.String, locked: Locked_setGroupLocked, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/lock".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"locked"+"}", encodeURIComponent(locked.value.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setGroupName(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : APIResponse {
        val localVarResponse = setGroupNameWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setGroupNameWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = setGroupNameRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateNamePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setGroupName
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return RequestConfig
     */
    fun setGroupNameRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : RequestConfig<GroupUpdateNamePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/name".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param setGroupPictureRequest 
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun setGroupPicture(instanceKey: kotlin.String, groupId: kotlin.String, setGroupPictureRequest: SetGroupPictureRequest) : APIResponse {
        val localVarResponse = setGroupPictureWithHttpInfo(instanceKey = instanceKey, groupId = groupId, setGroupPictureRequest = setGroupPictureRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param setGroupPictureRequest 
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun setGroupPictureWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, setGroupPictureRequest: SetGroupPictureRequest) : ApiResponse<APIResponse?> {
        val localVariableConfig = setGroupPictureRequestConfig(instanceKey = instanceKey, groupId = groupId, setGroupPictureRequest = setGroupPictureRequest)

        return request<SetGroupPictureRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation setGroupPicture
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param setGroupPictureRequest 
     * @return RequestConfig
     */
    fun setGroupPictureRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, setGroupPictureRequest: SetGroupPictureRequest) : RequestConfig<SetGroupPictureRequest> {
        val localVariableBody = setGroupPictureRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/profile-pic".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
