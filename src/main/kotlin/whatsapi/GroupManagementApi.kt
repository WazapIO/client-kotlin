/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package whatsapi

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import models.APIResponse
import models.GroupCreatePayload
import models.GroupUpdateDescriptionPayload
import models.GroupUpdateNamePayload
import models.GroupUpdateParticipantsPayload
import models.InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest

import com.squareup.moshi.Json

import WhatsAPI.infrastructure.ApiClient
import WhatsAPI.infrastructure.ApiResponse
import WhatsAPI.infrastructure.ClientException
import WhatsAPI.infrastructure.ClientError
import WhatsAPI.infrastructure.ServerException
import WhatsAPI.infrastructure.ServerError
import WhatsAPI.infrastructure.MultiValueMap
import WhatsAPI.infrastructure.PartConfig
import WhatsAPI.infrastructure.RequestConfig
import WhatsAPI.infrastructure.RequestMethod
import WhatsAPI.infrastructure.ResponseType
import WhatsAPI.infrastructure.Success
import WhatsAPI.infrastructure.toMultiValue

class GroupManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Get admin groupss.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsAdminGet(instanceKey: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsAdminGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get admin groupss.
     * Returns list of all groups in which you are admin.
     * @param instanceKey Instance key
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsAdminGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsAdminGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsAdminGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsAdminGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/admin".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsCreatePost(instanceKey: kotlin.String, `data`: GroupCreatePayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsCreatePostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create group.
     * Creates a group with the participant data. The creator is automatically added to the group.
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsCreatePostWithHttpInfo(instanceKey: kotlin.String, `data`: GroupCreatePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsCreatePostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<GroupCreatePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsCreatePost
     *
     * @param instanceKey Instance key
     * @param `data` Group create payload
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsCreatePostRequestConfig(instanceKey: kotlin.String, `data`: GroupCreatePayload) : RequestConfig<GroupCreatePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/groups/create".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter includeParticipants
     */
     enum class IncludeParticipants_instancesInstanceKeyGroupsGet(val value: kotlin.String) {
         @Json(name = "false") `false`("false"),
         @Json(name = "true") `true`("true")
     }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGet(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_instancesInstanceKeyGroupsGet? = IncludeParticipants_instancesInstanceKeyGroupsGet.&#x60;true&#x60;) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGetWithHttpInfo(instanceKey = instanceKey, includeParticipants = includeParticipants)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all groups.
     * Returns list of all groups with participants data. Set include_participants to false to exclude participants data.
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGetWithHttpInfo(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_instancesInstanceKeyGroupsGet?) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGetRequestConfig(instanceKey = instanceKey, includeParticipants = includeParticipants)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGet
     *
     * @param instanceKey Instance key
     * @param includeParticipants Include participants data (optional, default to true)
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGetRequestConfig(instanceKey: kotlin.String, includeParticipants: IncludeParticipants_instancesInstanceKeyGroupsGet?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeParticipants != null) {
                    put("include_participants", listOf(includeParticipants.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter announce
     */
     enum class Announce_instancesInstanceKeyGroupsGroupIdAnnouncePut(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false")
     }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdAnnouncePut(instanceKey: kotlin.String, announce: Announce_instancesInstanceKeyGroupsGroupIdAnnouncePut = Announce_instancesInstanceKeyGroupsGroupIdAnnouncePut.false, groupId: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo(instanceKey = instanceKey, announce = announce, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group announce.
     * Set if non-admins are allowed to send messages in groups
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdAnnouncePutWithHttpInfo(instanceKey: kotlin.String, announce: Announce_instancesInstanceKeyGroupsGroupIdAnnouncePut, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdAnnouncePutRequestConfig(instanceKey = instanceKey, announce = announce, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdAnnouncePut
     *
     * @param instanceKey Instance key
     * @param announce Announce status (default to false)
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdAnnouncePutRequestConfig(instanceKey: kotlin.String, announce: Announce_instancesInstanceKeyGroupsGroupIdAnnouncePut, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/announce".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"announce"+"}", encodeURIComponent(announce.value.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdDelete(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Leaves the group.
     * Leaves the specified group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdDeleteWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdDeleteRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdDelete
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdDeleteRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/groups/{group_id}/".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdDescriptionPut(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group description.
     * Changes the group description
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdDescriptionPutWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdDescriptionPutRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateDescriptionPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdDescriptionPut
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group description data
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdDescriptionPutRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateDescriptionPayload) : RequestConfig<GroupUpdateDescriptionPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/description".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdGet(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdGetWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group.
     * Fetches the group data.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdGetWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdGetRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdGet
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdGetRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/{group_id}".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdInviteCodeGet(instanceKey: kotlin.String, groupId: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo(instanceKey = instanceKey, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group invite code.
     * Gets the invite code of the group.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdInviteCodeGetWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdInviteCodeGetRequestConfig(instanceKey = instanceKey, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdInviteCodeGet
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdInviteCodeGetRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/{group_id}/invite-code".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter locked
     */
     enum class Locked_instancesInstanceKeyGroupsGroupIdLockPut(val value: kotlin.Boolean) {
         @Json(name = ""true"") `true`("true"),
         @Json(name = ""false"") `false`("false")
     }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdLockPut(instanceKey: kotlin.String, locked: Locked_instancesInstanceKeyGroupsGroupIdLockPut = Locked_instancesInstanceKeyGroupsGroupIdLockPut.false, groupId: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo(instanceKey = instanceKey, locked = locked, groupId = groupId)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group locked.
     * Set if non-admins are allowed to change the group dp and other stuff
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdLockPutWithHttpInfo(instanceKey: kotlin.String, locked: Locked_instancesInstanceKeyGroupsGroupIdLockPut, groupId: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdLockPutRequestConfig(instanceKey = instanceKey, locked = locked, groupId = groupId)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdLockPut
     *
     * @param instanceKey Instance key
     * @param locked Locked status (default to false)
     * @param groupId Group id of the group
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdLockPutRequestConfig(instanceKey: kotlin.String, locked: Locked_instancesInstanceKeyGroupsGroupIdLockPut, groupId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/lock".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"locked"+"}", encodeURIComponent(locked.value.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdNamePut(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group name.
     * Changes the group name. The max limit is 22 chars
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdNamePutWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdNamePutRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateNamePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdNamePut
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group name data
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdNamePutRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateNamePayload) : RequestConfig<GroupUpdateNamePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/name".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsAddPost(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add participant.
     * Handles adding participants to a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsAddPostWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdParticipantsAddPostRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdParticipantsAddPost
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdParticipantsAddPostRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/groups/{group_id}/participants/add".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsDemotePut(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Demote participant.
     * Demotes admins in groups. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsDemotePutWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdParticipantsDemotePut
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdParticipantsDemotePutRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/participants/demote".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsPromotePut(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Promote participant.
     * Promotes participants to admin. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsPromotePutWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdParticipantsPromotePut
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdParticipantsPromotePutRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/participants/promote".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Remove participant.
     * Handles removing participants from a group. You must be admin in the group or the query will fail.
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequestConfig(instanceKey = instanceKey, groupId = groupId, `data` = `data`)

        return request<GroupUpdateParticipantsPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdParticipantsRemoveDelete
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param `data` Group update payload
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdParticipantsRemoveDeleteRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, `data`: GroupUpdateParticipantsPayload) : RequestConfig<GroupUpdateParticipantsPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/instances/{instance_key}/groups/{group_id}/participants/remove".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest 
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsGroupIdProfilePicPut(instanceKey: kotlin.String, groupId: kotlin.String, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest: InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo(instanceKey = instanceKey, groupId = groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Set group picture.
     * Changes the group profile picture. Currently it only seems to accept JPEG images only
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest 
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsGroupIdProfilePicPutWithHttpInfo(instanceKey: kotlin.String, groupId: kotlin.String, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest: InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsGroupIdProfilePicPutRequestConfig(instanceKey = instanceKey, groupId = groupId, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest)

        return request<InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsGroupIdProfilePicPut
     *
     * @param instanceKey Instance key
     * @param groupId Group id of the group
     * @param instancesInstanceKeyGroupsGroupIdProfilePicPutRequest 
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsGroupIdProfilePicPutRequestConfig(instanceKey: kotlin.String, groupId: kotlin.String, instancesInstanceKeyGroupsGroupIdProfilePicPutRequest: InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest) : RequestConfig<InstancesInstanceKeyGroupsGroupIdProfilePicPutRequest> {
        val localVariableBody = instancesInstanceKeyGroupsGroupIdProfilePicPutRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.PUT,
            path = "/instances/{instance_key}/groups/{group_id}/profile-pic".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())).replace("{"+"group_id"+"}", encodeURIComponent(groupId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyGroupsInviteInfoGet(instanceKey: kotlin.String, inviteLink: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo(instanceKey = instanceKey, inviteLink = inviteLink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get group from invite link.
     * Gets a group info from an invite link. An invite link is a link that can be used to join a group. It is usually in the format https://chat.whatsapp.com/{invitecode}
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyGroupsInviteInfoGetWithHttpInfo(instanceKey: kotlin.String, inviteLink: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyGroupsInviteInfoGetRequestConfig(instanceKey = instanceKey, inviteLink = inviteLink)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyGroupsInviteInfoGet
     *
     * @param instanceKey Instance key
     * @param inviteLink The invite link to check
     * @return RequestConfig
     */
    fun instancesInstanceKeyGroupsInviteInfoGetRequestConfig(instanceKey: kotlin.String, inviteLink: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("invite_link", listOf(inviteLink.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/groups/invite-info".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
