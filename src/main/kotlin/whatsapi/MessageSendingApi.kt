/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package whatsapi

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import models.APIResponse
import models.ButtonMessagePayload
import models.ButtonMessageWithMediaPayload
import models.ContactMessagePayload
import models.GroupInviteMessagePayload
import models.ListMessagePayload
import models.LocationMessagePayload
import models.PollMessagePayload
import models.SendAudioRequest
import models.SendDocumentRequest
import models.SendMediaPayload
import models.SendVideoRequest
import models.TemplateButtonPayload
import models.TemplateButtonWithMediaPayload
import models.TextMessage
import models.UpdateProfilePicRequest
import models.UploadMediaRequest
import models.UrlMediaUploadPayload

import com.squareup.moshi.Json

import WhatsAPI.infrastructure.ApiClient
import WhatsAPI.infrastructure.ApiResponse
import WhatsAPI.infrastructure.ClientException
import WhatsAPI.infrastructure.ClientError
import WhatsAPI.infrastructure.ServerException
import WhatsAPI.infrastructure.ServerError
import WhatsAPI.infrastructure.MultiValueMap
import WhatsAPI.infrastructure.PartConfig
import WhatsAPI.infrastructure.RequestConfig
import WhatsAPI.infrastructure.RequestMethod
import WhatsAPI.infrastructure.ResponseType
import WhatsAPI.infrastructure.Success
import WhatsAPI.infrastructure.toMultiValue

class MessageSendingApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendAudioRequest 
     * @param caption Attached caption (optional)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendAudio(instanceKey: kotlin.String, to: kotlin.String, sendAudioRequest: SendAudioRequest, caption: kotlin.String? = null) : APIResponse {
        val localVarResponse = sendAudioWithHttpInfo(instanceKey = instanceKey, to = to, sendAudioRequest = sendAudioRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendAudioRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendAudioWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, sendAudioRequest: SendAudioRequest, caption: kotlin.String?) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendAudioRequestConfig(instanceKey = instanceKey, to = to, sendAudioRequest = sendAudioRequest, caption = caption)

        return request<SendAudioRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendAudio
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendAudioRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun sendAudioRequestConfig(instanceKey: kotlin.String, to: kotlin.String, sendAudioRequest: SendAudioRequest, caption: kotlin.String?) : RequestConfig<SendAudioRequest> {
        val localVariableBody = sendAudioRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/audio".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendButtonMessage(instanceKey: kotlin.String, `data`: ButtonMessagePayload) : APIResponse {
        val localVarResponse = sendButtonMessageWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendButtonMessageWithHttpInfo(instanceKey: kotlin.String, `data`: ButtonMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendButtonMessageRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<ButtonMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendButtonMessage
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendButtonMessageRequestConfig(instanceKey: kotlin.String, `data`: ButtonMessagePayload) : RequestConfig<ButtonMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/buttons".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendButtonWithMedia(instanceKey: kotlin.String, `data`: ButtonMessageWithMediaPayload) : APIResponse {
        val localVarResponse = sendButtonWithMediaWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendButtonWithMediaWithHttpInfo(instanceKey: kotlin.String, `data`: ButtonMessageWithMediaPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendButtonWithMediaRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<ButtonMessageWithMediaPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendButtonWithMedia
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendButtonWithMediaRequestConfig(instanceKey: kotlin.String, `data`: ButtonMessageWithMediaPayload) : RequestConfig<ButtonMessageWithMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/button-media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendContact(instanceKey: kotlin.String, `data`: ContactMessagePayload) : APIResponse {
        val localVarResponse = sendContactWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendContactWithHttpInfo(instanceKey: kotlin.String, `data`: ContactMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendContactRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<ContactMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendContact
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendContactRequestConfig(instanceKey: kotlin.String, `data`: ContactMessagePayload) : RequestConfig<ContactMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/contact".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendDocumentRequest 
     * @param caption Attached caption (optional)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendDocument(instanceKey: kotlin.String, to: kotlin.String, sendDocumentRequest: SendDocumentRequest, caption: kotlin.String? = null) : APIResponse {
        val localVarResponse = sendDocumentWithHttpInfo(instanceKey = instanceKey, to = to, sendDocumentRequest = sendDocumentRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendDocumentRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendDocumentWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, sendDocumentRequest: SendDocumentRequest, caption: kotlin.String?) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendDocumentRequestConfig(instanceKey = instanceKey, to = to, sendDocumentRequest = sendDocumentRequest, caption = caption)

        return request<SendDocumentRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendDocument
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendDocumentRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun sendDocumentRequestConfig(instanceKey: kotlin.String, to: kotlin.String, sendDocumentRequest: SendDocumentRequest, caption: kotlin.String?) : RequestConfig<SendDocumentRequest> {
        val localVariableBody = sendDocumentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/document".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a group invite message
     * Sends a group invite message to the specified number. Don&#39;t include \&quot;https://chat.whatsapp.com/\&quot; in the invite code.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendGroupInvite(instanceKey: kotlin.String, `data`: GroupInviteMessagePayload) : APIResponse {
        val localVarResponse = sendGroupInviteWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a group invite message
     * Sends a group invite message to the specified number. Don&#39;t include \&quot;https://chat.whatsapp.com/\&quot; in the invite code.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendGroupInviteWithHttpInfo(instanceKey: kotlin.String, `data`: GroupInviteMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendGroupInviteRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<GroupInviteMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendGroupInvite
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendGroupInviteRequestConfig(instanceKey: kotlin.String, `data`: GroupInviteMessagePayload) : RequestConfig<GroupInviteMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/group-invite".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param updateProfilePicRequest 
     * @param caption Attached caption (optional)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendImage(instanceKey: kotlin.String, to: kotlin.String, updateProfilePicRequest: UpdateProfilePicRequest, caption: kotlin.String? = null) : APIResponse {
        val localVarResponse = sendImageWithHttpInfo(instanceKey = instanceKey, to = to, updateProfilePicRequest = updateProfilePicRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param updateProfilePicRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendImageWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, updateProfilePicRequest: UpdateProfilePicRequest, caption: kotlin.String?) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendImageRequestConfig(instanceKey = instanceKey, to = to, updateProfilePicRequest = updateProfilePicRequest, caption = caption)

        return request<UpdateProfilePicRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendImage
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param updateProfilePicRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun sendImageRequestConfig(instanceKey: kotlin.String, to: kotlin.String, updateProfilePicRequest: UpdateProfilePicRequest, caption: kotlin.String?) : RequestConfig<UpdateProfilePicRequest> {
        val localVariableBody = updateProfilePicRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/image".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendListMessage(instanceKey: kotlin.String, `data`: ListMessagePayload) : APIResponse {
        val localVarResponse = sendListMessageWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendListMessageWithHttpInfo(instanceKey: kotlin.String, `data`: ListMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendListMessageRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<ListMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendListMessage
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendListMessageRequestConfig(instanceKey: kotlin.String, `data`: ListMessagePayload) : RequestConfig<ListMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/list".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendLocation(instanceKey: kotlin.String, `data`: LocationMessagePayload) : APIResponse {
        val localVarResponse = sendLocationWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendLocationWithHttpInfo(instanceKey: kotlin.String, `data`: LocationMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendLocationRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<LocationMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendLocation
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendLocationRequestConfig(instanceKey: kotlin.String, `data`: LocationMessagePayload) : RequestConfig<LocationMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/location".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendMediaMessage(instanceKey: kotlin.String, `data`: SendMediaPayload) : APIResponse {
        val localVarResponse = sendMediaMessageWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendMediaMessageWithHttpInfo(instanceKey: kotlin.String, `data`: SendMediaPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendMediaMessageRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<SendMediaPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendMediaMessage
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendMediaMessageRequestConfig(instanceKey: kotlin.String, `data`: SendMediaPayload) : RequestConfig<SendMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a Poll message.
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendPollMessage(instanceKey: kotlin.String, `data`: PollMessagePayload) : APIResponse {
        val localVarResponse = sendPollMessageWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a Poll message.
     * Sends an interactive poll message to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendPollMessageWithHttpInfo(instanceKey: kotlin.String, `data`: PollMessagePayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendPollMessageRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<PollMessagePayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendPollMessage
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendPollMessageRequestConfig(instanceKey: kotlin.String, `data`: PollMessagePayload) : RequestConfig<PollMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/poll".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendTemplate(instanceKey: kotlin.String, `data`: TemplateButtonPayload) : APIResponse {
        val localVarResponse = sendTemplateWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendTemplateWithHttpInfo(instanceKey: kotlin.String, `data`: TemplateButtonPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendTemplateRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<TemplateButtonPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendTemplate
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendTemplateRequestConfig(instanceKey: kotlin.String, `data`: TemplateButtonPayload) : RequestConfig<TemplateButtonPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/template".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendTemplateWithMedia(instanceKey: kotlin.String, `data`: TemplateButtonWithMediaPayload) : APIResponse {
        val localVarResponse = sendTemplateWithMediaWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendTemplateWithMediaWithHttpInfo(instanceKey: kotlin.String, `data`: TemplateButtonWithMediaPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendTemplateWithMediaRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<TemplateButtonWithMediaPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendTemplateWithMedia
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendTemplateWithMediaRequestConfig(instanceKey: kotlin.String, `data`: TemplateButtonWithMediaPayload) : RequestConfig<TemplateButtonWithMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/template-media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendTextMessage(instanceKey: kotlin.String, `data`: TextMessage) : APIResponse {
        val localVarResponse = sendTextMessageWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendTextMessageWithHttpInfo(instanceKey: kotlin.String, `data`: TextMessage) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendTextMessageRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<TextMessage, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendTextMessage
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun sendTextMessageRequestConfig(instanceKey: kotlin.String, `data`: TextMessage) : RequestConfig<TextMessage> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/text".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendVideoRequest 
     * @param caption Attached caption (optional)
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun sendVideo(instanceKey: kotlin.String, to: kotlin.String, sendVideoRequest: SendVideoRequest, caption: kotlin.String? = null) : APIResponse {
        val localVarResponse = sendVideoWithHttpInfo(instanceKey = instanceKey, to = to, sendVideoRequest = sendVideoRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendVideoRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun sendVideoWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, sendVideoRequest: SendVideoRequest, caption: kotlin.String?) : ApiResponse<APIResponse?> {
        val localVariableConfig = sendVideoRequestConfig(instanceKey = instanceKey, to = to, sendVideoRequest = sendVideoRequest, caption = caption)

        return request<SendVideoRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation sendVideo
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param sendVideoRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun sendVideoRequestConfig(instanceKey: kotlin.String, to: kotlin.String, sendVideoRequest: SendVideoRequest, caption: kotlin.String?) : RequestConfig<SendVideoRequest> {
        val localVariableBody = sendVideoRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/video".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
     enum class Type_uploadMedia(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "audio") audio("audio"),
         @Json(name = "document") document("document")
     }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param uploadMediaRequest 
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadMedia(instanceKey: kotlin.String, type: Type_uploadMedia, uploadMediaRequest: UploadMediaRequest) : APIResponse {
        val localVarResponse = uploadMediaWithHttpInfo(instanceKey = instanceKey, type = type, uploadMediaRequest = uploadMediaRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param uploadMediaRequest 
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadMediaWithHttpInfo(instanceKey: kotlin.String, type: Type_uploadMedia, uploadMediaRequest: UploadMediaRequest) : ApiResponse<APIResponse?> {
        val localVariableConfig = uploadMediaRequestConfig(instanceKey = instanceKey, type = type, uploadMediaRequest = uploadMediaRequest)

        return request<UploadMediaRequest, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadMedia
     *
     * @param instanceKey Instance key
     * @param type Media type
     * @param uploadMediaRequest 
     * @return RequestConfig
     */
    fun uploadMediaRequestConfig(instanceKey: kotlin.String, type: Type_uploadMedia, uploadMediaRequest: UploadMediaRequest) : RequestConfig<UploadMediaRequest> {
        val localVariableBody = uploadMediaRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("type", listOf(type.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/upload".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
     enum class Type_uploadMediaFromUrl(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "audio") audio("audio"),
         @Json(name = "document") document("document")
     }

    /**
     * Upload media from url.
     * Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param `data` Media data
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun uploadMediaFromUrl(instanceKey: kotlin.String, type: Type_uploadMediaFromUrl, `data`: UrlMediaUploadPayload) : APIResponse {
        val localVarResponse = uploadMediaFromUrlWithHttpInfo(instanceKey = instanceKey, type = type, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload media from url.
     * Uploads media from a url to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param `data` Media data
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun uploadMediaFromUrlWithHttpInfo(instanceKey: kotlin.String, type: Type_uploadMediaFromUrl, `data`: UrlMediaUploadPayload) : ApiResponse<APIResponse?> {
        val localVariableConfig = uploadMediaFromUrlRequestConfig(instanceKey = instanceKey, type = type, `data` = `data`)

        return request<UrlMediaUploadPayload, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation uploadMediaFromUrl
     *
     * @param instanceKey Instance key
     * @param type Media type
     * @param `data` Media data
     * @return RequestConfig
     */
    fun uploadMediaFromUrlRequestConfig(instanceKey: kotlin.String, type: Type_uploadMediaFromUrl, `data`: UrlMediaUploadPayload) : RequestConfig<UrlMediaUploadPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("type", listOf(type.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/upload-url".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
