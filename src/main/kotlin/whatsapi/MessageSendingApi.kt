/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package whatsapi

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import models.InstancesInstanceKeySendAudioPostRequest
import models.InstancesInstanceKeySendDocumentPostRequest
import models.InstancesInstanceKeySendImagePostRequest
import models.InstancesInstanceKeySendUploadPostRequest
import models.InstancesInstanceKeySendVideoPostRequest
import models.MainAPIResponse
import models.StructsButtonMessagePayload
import models.StructsButtonMessageWithMediaPayload
import models.StructsContactMessagePayload
import models.StructsListMessagePayload
import models.StructsLocationMessagePayload
import models.StructsPollMessagePayload
import models.StructsSendMediaPayload
import models.StructsTemplateButtonPayload
import models.StructsTemplateButtonWithMediaPayload
import models.StructsTextMessage

import com.squareup.moshi.Json

import WhatsAPI.infrastructure.ApiClient
import WhatsAPI.infrastructure.ApiResponse
import WhatsAPI.infrastructure.ClientException
import WhatsAPI.infrastructure.ClientError
import WhatsAPI.infrastructure.ServerException
import WhatsAPI.infrastructure.ServerError
import WhatsAPI.infrastructure.MultiValueMap
import WhatsAPI.infrastructure.PartConfig
import WhatsAPI.infrastructure.RequestConfig
import WhatsAPI.infrastructure.RequestMethod
import WhatsAPI.infrastructure.ResponseType
import WhatsAPI.infrastructure.Success
import WhatsAPI.infrastructure.toMultiValue

class MessageSendingApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyBusinessCatalogGet(instanceKey: kotlin.String) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeyBusinessCatalogGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyBusinessCatalogGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyBusinessCatalogGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/business/catalog".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendAudioPostRequest 
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendAudioPost(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendAudioPostRequest: InstancesInstanceKeySendAudioPostRequest, caption: kotlin.String? = null) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendAudioPostWithHttpInfo(instanceKey = instanceKey, to = to, instancesInstanceKeySendAudioPostRequest = instancesInstanceKeySendAudioPostRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw audio.
     * Sends a audio message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendAudioPostRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendAudioPostWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendAudioPostRequest: InstancesInstanceKeySendAudioPostRequest, caption: kotlin.String?) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendAudioPostRequestConfig(instanceKey = instanceKey, to = to, instancesInstanceKeySendAudioPostRequest = instancesInstanceKeySendAudioPostRequest, caption = caption)

        return request<InstancesInstanceKeySendAudioPostRequest, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendAudioPost
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendAudioPostRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun instancesInstanceKeySendAudioPostRequestConfig(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendAudioPostRequest: InstancesInstanceKeySendAudioPostRequest, caption: kotlin.String?) : RequestConfig<InstancesInstanceKeySendAudioPostRequest> {
        val localVariableBody = instancesInstanceKeySendAudioPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/audio".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendButtonMediaPost(instanceKey: kotlin.String, `data`: StructsButtonMessageWithMediaPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendButtonMediaPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a button message with a media header.
     * Sends an interactive button message to the given user. This message also has media header with it. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendButtonMediaPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsButtonMessageWithMediaPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendButtonMediaPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsButtonMessageWithMediaPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendButtonMediaPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendButtonMediaPostRequestConfig(instanceKey: kotlin.String, `data`: StructsButtonMessageWithMediaPayload) : RequestConfig<StructsButtonMessageWithMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/button-media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendButtonsPost(instanceKey: kotlin.String, `data`: StructsButtonMessagePayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendButtonsPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a button message.
     * Sends an interactive button message to the given user. Make sure that all the button ids are unique
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendButtonsPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsButtonMessagePayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendButtonsPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsButtonMessagePayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendButtonsPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendButtonsPostRequestConfig(instanceKey: kotlin.String, `data`: StructsButtonMessagePayload) : RequestConfig<StructsButtonMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/buttons".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendContactPost(instanceKey: kotlin.String, `data`: StructsContactMessagePayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendContactPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a contact message.
     * Sends a contact (vcard) message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendContactPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsContactMessagePayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendContactPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsContactMessagePayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendContactPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendContactPostRequestConfig(instanceKey: kotlin.String, `data`: StructsContactMessagePayload) : RequestConfig<StructsContactMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/contact".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendDocumentPostRequest 
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendDocumentPost(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendDocumentPostRequest: InstancesInstanceKeySendDocumentPostRequest, caption: kotlin.String? = null) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendDocumentPostWithHttpInfo(instanceKey = instanceKey, to = to, instancesInstanceKeySendDocumentPostRequest = instancesInstanceKeySendDocumentPostRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw document.
     * Sends a document message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendDocumentPostRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendDocumentPostWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendDocumentPostRequest: InstancesInstanceKeySendDocumentPostRequest, caption: kotlin.String?) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendDocumentPostRequestConfig(instanceKey = instanceKey, to = to, instancesInstanceKeySendDocumentPostRequest = instancesInstanceKeySendDocumentPostRequest, caption = caption)

        return request<InstancesInstanceKeySendDocumentPostRequest, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendDocumentPost
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendDocumentPostRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun instancesInstanceKeySendDocumentPostRequestConfig(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendDocumentPostRequest: InstancesInstanceKeySendDocumentPostRequest, caption: kotlin.String?) : RequestConfig<InstancesInstanceKeySendDocumentPostRequest> {
        val localVariableBody = instancesInstanceKeySendDocumentPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/document".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendImagePostRequest 
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendImagePost(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendImagePostRequest: InstancesInstanceKeySendImagePostRequest, caption: kotlin.String? = null) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendImagePostWithHttpInfo(instanceKey = instanceKey, to = to, instancesInstanceKeySendImagePostRequest = instancesInstanceKeySendImagePostRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw image.
     * Sends a image message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendImagePostRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendImagePostWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendImagePostRequest: InstancesInstanceKeySendImagePostRequest, caption: kotlin.String?) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendImagePostRequestConfig(instanceKey = instanceKey, to = to, instancesInstanceKeySendImagePostRequest = instancesInstanceKeySendImagePostRequest, caption = caption)

        return request<InstancesInstanceKeySendImagePostRequest, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendImagePost
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendImagePostRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun instancesInstanceKeySendImagePostRequestConfig(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendImagePostRequest: InstancesInstanceKeySendImagePostRequest, caption: kotlin.String?) : RequestConfig<InstancesInstanceKeySendImagePostRequest> {
        val localVariableBody = instancesInstanceKeySendImagePostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/image".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendListPost(instanceKey: kotlin.String, `data`: StructsListMessagePayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendListPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a List message.
     * Sends an interactive List message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendListPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsListMessagePayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendListPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsListMessagePayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendListPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendListPostRequestConfig(instanceKey: kotlin.String, `data`: StructsListMessagePayload) : RequestConfig<StructsListMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/list".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendLocationPost(instanceKey: kotlin.String, `data`: StructsLocationMessagePayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendLocationPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a location message.
     * Sends a location message to the given user. This is static location and does not update Note: The Address and Url fields are optional
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendLocationPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsLocationMessagePayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendLocationPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsLocationMessagePayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendLocationPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendLocationPostRequestConfig(instanceKey: kotlin.String, `data`: StructsLocationMessagePayload) : RequestConfig<StructsLocationMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/location".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendMediaPost(instanceKey: kotlin.String, `data`: StructsSendMediaPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendMediaPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a media message.
     * Sends a media message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendMediaPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsSendMediaPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendMediaPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsSendMediaPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendMediaPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendMediaPostRequestConfig(instanceKey: kotlin.String, `data`: StructsSendMediaPayload) : RequestConfig<StructsSendMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a Poll message with media.
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendPollPost(instanceKey: kotlin.String, `data`: StructsPollMessagePayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendPollPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a Poll message with media.
     * Sends an interactive poll message with a media header to the given user. The poll message is a new feature that is currently in beta.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendPollPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsPollMessagePayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendPollPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsPollMessagePayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendPollPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendPollPostRequestConfig(instanceKey: kotlin.String, `data`: StructsPollMessagePayload) : RequestConfig<StructsPollMessagePayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/poll".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendTemplateMediaPost(instanceKey: kotlin.String, `data`: StructsTemplateButtonWithMediaPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendTemplateMediaPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a template message with media.
     * Sends an interactive template message with a media header to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendTemplateMediaPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsTemplateButtonWithMediaPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendTemplateMediaPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsTemplateButtonWithMediaPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendTemplateMediaPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendTemplateMediaPostRequestConfig(instanceKey: kotlin.String, `data`: StructsTemplateButtonWithMediaPayload) : RequestConfig<StructsTemplateButtonWithMediaPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/template-media".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendTemplatePost(instanceKey: kotlin.String, `data`: StructsTemplateButtonPayload) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendTemplatePostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a template message.
     * Sends an interactive template message to the given user. Note: The valid button types are \&quot;replyButton\&quot;, \&quot;urlButton\&quot;, \&quot;callButton\&quot;
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendTemplatePostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsTemplateButtonPayload) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendTemplatePostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsTemplateButtonPayload, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendTemplatePost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendTemplatePostRequestConfig(instanceKey: kotlin.String, `data`: StructsTemplateButtonPayload) : RequestConfig<StructsTemplateButtonPayload> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/template".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendTextPost(instanceKey: kotlin.String, `data`: StructsTextMessage) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendTextPostWithHttpInfo(instanceKey = instanceKey, `data` = `data`)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send a text message.
     * Sends a text message to the given user.
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendTextPostWithHttpInfo(instanceKey: kotlin.String, `data`: StructsTextMessage) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendTextPostRequestConfig(instanceKey = instanceKey, `data` = `data`)

        return request<StructsTextMessage, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendTextPost
     *
     * @param instanceKey Instance key
     * @param `data` Message data
     * @return RequestConfig
     */
    fun instancesInstanceKeySendTextPostRequestConfig(instanceKey: kotlin.String, `data`: StructsTextMessage) : RequestConfig<StructsTextMessage> {
        val localVariableBody = `data`
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/text".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter type
     */
     enum class Type_instancesInstanceKeySendUploadPost(val value: kotlin.String) {
         @Json(name = "image") image("image"),
         @Json(name = "video") video("video"),
         @Json(name = "audio") audio("audio"),
         @Json(name = "document") document("document")
     }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param instancesInstanceKeySendUploadPostRequest 
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendUploadPost(instanceKey: kotlin.String, type: Type_instancesInstanceKeySendUploadPost, instancesInstanceKeySendUploadPostRequest: InstancesInstanceKeySendUploadPostRequest) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendUploadPostWithHttpInfo(instanceKey = instanceKey, type = type, instancesInstanceKeySendUploadPostRequest = instancesInstanceKeySendUploadPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload media.
     * Uploads media to WhatsApp servers and returns the media keys. Store the returned media keys, as you will need them to send media messages
     * @param instanceKey Instance key
     * @param type Media type
     * @param instancesInstanceKeySendUploadPostRequest 
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendUploadPostWithHttpInfo(instanceKey: kotlin.String, type: Type_instancesInstanceKeySendUploadPost, instancesInstanceKeySendUploadPostRequest: InstancesInstanceKeySendUploadPostRequest) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendUploadPostRequestConfig(instanceKey = instanceKey, type = type, instancesInstanceKeySendUploadPostRequest = instancesInstanceKeySendUploadPostRequest)

        return request<InstancesInstanceKeySendUploadPostRequest, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendUploadPost
     *
     * @param instanceKey Instance key
     * @param type Media type
     * @param instancesInstanceKeySendUploadPostRequest 
     * @return RequestConfig
     */
    fun instancesInstanceKeySendUploadPostRequestConfig(instanceKey: kotlin.String, type: Type_instancesInstanceKeySendUploadPost, instancesInstanceKeySendUploadPostRequest: InstancesInstanceKeySendUploadPostRequest) : RequestConfig<InstancesInstanceKeySendUploadPostRequest> {
        val localVariableBody = instancesInstanceKeySendUploadPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("type", listOf(type.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/upload".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendVideoPostRequest 
     * @param caption Attached caption (optional)
     * @return MainAPIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeySendVideoPost(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendVideoPostRequest: InstancesInstanceKeySendVideoPostRequest, caption: kotlin.String? = null) : MainAPIResponse {
        val localVarResponse = instancesInstanceKeySendVideoPostWithHttpInfo(instanceKey = instanceKey, to = to, instancesInstanceKeySendVideoPostRequest = instancesInstanceKeySendVideoPostRequest, caption = caption)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MainAPIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send raw video.
     * Sends a video message by uploading to the WhatsApp servers every time. This is not recommended for bulk sending.
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendVideoPostRequest 
     * @param caption Attached caption (optional)
     * @return ApiResponse<MainAPIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeySendVideoPostWithHttpInfo(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendVideoPostRequest: InstancesInstanceKeySendVideoPostRequest, caption: kotlin.String?) : ApiResponse<MainAPIResponse?> {
        val localVariableConfig = instancesInstanceKeySendVideoPostRequestConfig(instanceKey = instanceKey, to = to, instancesInstanceKeySendVideoPostRequest = instancesInstanceKeySendVideoPostRequest, caption = caption)

        return request<InstancesInstanceKeySendVideoPostRequest, MainAPIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeySendVideoPost
     *
     * @param instanceKey Instance key
     * @param to The recipient&#39;s number
     * @param instancesInstanceKeySendVideoPostRequest 
     * @param caption Attached caption (optional)
     * @return RequestConfig
     */
    fun instancesInstanceKeySendVideoPostRequestConfig(instanceKey: kotlin.String, to: kotlin.String, instancesInstanceKeySendVideoPostRequest: InstancesInstanceKeySendVideoPostRequest, caption: kotlin.String?) : RequestConfig<InstancesInstanceKeySendVideoPostRequest> {
        val localVariableBody = instancesInstanceKeySendVideoPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("to", listOf(to.toString()))
                if (caption != null) {
                    put("caption", listOf(caption.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/instances/{instance_key}/send/video".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
