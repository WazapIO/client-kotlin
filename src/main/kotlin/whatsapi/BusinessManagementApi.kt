/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package whatsapi

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import models.APIResponse

import com.squareup.moshi.Json

import WhatsAPI.infrastructure.ApiClient
import WhatsAPI.infrastructure.ApiResponse
import WhatsAPI.infrastructure.ClientException
import WhatsAPI.infrastructure.ClientError
import WhatsAPI.infrastructure.ServerException
import WhatsAPI.infrastructure.ServerError
import WhatsAPI.infrastructure.MultiValueMap
import WhatsAPI.infrastructure.PartConfig
import WhatsAPI.infrastructure.RequestConfig
import WhatsAPI.infrastructure.RequestMethod
import WhatsAPI.infrastructure.ResponseType
import WhatsAPI.infrastructure.Success
import WhatsAPI.infrastructure.toMultiValue

class BusinessManagementApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "/api")
        }
    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key
     * @return APIResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun instancesInstanceKeyBusinessCatalogGet(instanceKey: kotlin.String) : APIResponse {
        val localVarResponse = instancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey = instanceKey)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Fetches the catlog.
     * Gets list of all products registered by you.
     * @param instanceKey Instance key
     * @return ApiResponse<APIResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun instancesInstanceKeyBusinessCatalogGetWithHttpInfo(instanceKey: kotlin.String) : ApiResponse<APIResponse?> {
        val localVariableConfig = instancesInstanceKeyBusinessCatalogGetRequestConfig(instanceKey = instanceKey)

        return request<Unit, APIResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation instancesInstanceKeyBusinessCatalogGet
     *
     * @param instanceKey Instance key
     * @return RequestConfig
     */
    fun instancesInstanceKeyBusinessCatalogGetRequestConfig(instanceKey: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/instances/{instance_key}/business/catalog".replace("{"+"instance_key"+"}", encodeURIComponent(instanceKey.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
